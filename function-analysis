"""
NOTES:
- to do exponents do ** not ^
- def of a derivitive = f' = (f(x+h) - f(x))/h as h approaches 0
- print (x, ",", eval(f)) 

"""
from ggame import App, Color, LineStyle, Sprite, RectangleAsset, CircleAsset, EllipseAsset, PolygonAsset
from math import sin, cos, radians

#inputs
f = input("enter a function equal to f(x) in terms of x: ")         #user inputs the funciton they want
a = int(input("what is the lower limit of your interval?: "))      #user inputs the domain of the function 
b = int(input("what is the upper limit of your interval?: "))      #user inputs the domain of the function

fx = range(a, b+1)
(list(fx))   #list of x-values
h = 0.001                 #defines delta x or h


########_finds f'
f1 = []                         # creates f1 which is a list that will contain y values for the function
for x in range(a,b+1):
    hk = eval(f)
    f1.append(hk)           #calcuates f(x) and puts in f1



fprime = []                     #creates a list that will contain fprimes
for x in range (a,b+1):         
   x = h+x                      #redefines x as x + h to find f(x+h)
   fh= eval(f)                  #calculates f(x+h)
   x = int(x-h+.1)-a            #redefines x so that it points to the coresponding f(x) value in f1
   p = round(((fh-f1[x])/h), 5) #rounds fprime
   fprime.append(p)             # calculates the derivitive using the definition of a derivitive and puts in fprime



#prints function outputs
print (" ") 
print ("f(x) in range", a, "to", b, "equals: ") 
print (f1)

print (" ") 
print ("f'(x) in range", a, "to", b, "equals: ") 
print (fprime)




##############_finding f"
fw = []
for x in range (a,b+1):
    x = x + h
    fw.append(eval(f))

f2 = []                         # f(x+2h)-f(x+h)/h or f'(x+h)
for x in range (a,b+1):
    x = x + 2*h
    fj = eval(f)
    f2.append(fj)

f5 = []                         # f(x+2h)-f(x+h)/h or f'(x+h)
for x in range (a,b+1):   
    x = x+h
    fp = eval(f)
    f5.append(fp)

f6 = []
for x in range (a,b+1):
    q = (f2[x]-f5[x])/(h)
    f6.append(q)

f3 = []                         # f(x+h)-f(x)/h or f'(x)
for x in range(a, b+1):
    x = x + h
    fi = eval(f)
    k = (fi-f1[x])/h
    f3.append(k)

fdouble = []                    # actual f' 
for x in range (a, b+1):
    s = round((f6[x]-f3[x])/h, 5)
    fdouble.append(s)
    
print (" ")  
print ("f''(x) in range", a, "to", b, "equals: ") 
print (fdouble)

print (" ") 
print("absolute min: ", (x, min(f1)))
print("absolute max: ", (x, max(f1)))

if fprime[] <= 0:
    print ("fprime is decreasing") 

if fprime[] >= 0:
    print ("fprime is increasing") 



"""
#####################_finds concavity using f''
#extrema at interior pts
if fdouble.append(eval(f))==0 in list(fprime) and fdouble.append(eval(f))<0 in list(fdouble) :
    print("local max @")
if fdouble.append(eval(f))==0 in list(fprime) and fdouble.append(eval(f))>0 in list(fdouble) :
    print("local min @")






#loop and figure out how to get x-value & include where fprime=DNE 1/0

#extrema at endpts
if fprime(a)<0:
    print ("local max @ x=", a)
if fprime(b)>0:
    print ("local max @ x=", a)
if fprime(b)<0:
    print ("local min @ x=", a)


#pts of inflection:
if fdouble.append(eval(f))=0 in list(fdouble) and
# +/-h are positive and negative=> POI
"""

"""
# colors
red = Color(0xff0000, 1.0)
blue = Color(0x0000ff, 1.0)
purple = Color(0x800080, 1.0)
black = Color(0x000000, 1.0)
# thin black line
thinline = LineStyle(1, black)

#circles
circle_blue = CircleAsset (10, thinline, blue)
circle_red = CircleAsset (10, thinline, red)
circle_purple = CircleAsset (10, thinline, purple)

#range definition
x = range(0, 370, 10) 


sprites = [Sprite (circle_blue, (anx,(100+100*sin(radians(anx))))) for anx in x]

sprites = [Sprite (circle_blue, (anx,(fprime[x]))) for anx in x]

sprites = [Sprite (circle_red, (anx,(100+100*cos(radians(anx))))) for anx in x]
sprites = [Sprite (circle_purple, (100+100*cos(radians(anx)),400+100*sin(radians(anx)))) for anx in x]

myapp = App()
myapp.run()

"""




























